@using VelozientComputers.Shared.DTOs

<div class="card mb-3">
    <div class="card-body">
        <div class="row">
            <!-- Computer Image -->
            <div class="col-2">
                @if (string.IsNullOrEmpty(Computer.ImageUrl))
                {
                    <div class="bg-light d-flex align-items-center justify-content-center" style="height: 120px;">
                        <span class="text-muted">No Image</span>
                    </div>
                }
                else
                {
                    <img src="@Computer.ImageUrl" alt="Computer" class="img-fluid rounded" style="height: 120px; object-fit: cover;" />
                }
            </div>

            <!-- Computer Details -->
            <div class="col-9">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-2">
                            <strong>Serial Number:</strong> @Computer.SerialNumber
                        </div>
                        <div class="mb-2">
                            <strong>Manufacturer:</strong> @Computer.Manufacturer
                        </div>
                        <div class="mb-2">
                            <strong>Status:</strong> @Computer.StatusDisplayName
                        </div>
                        <div>
                            <strong>Specifications:</strong>
                            <div class="specifications-container">
                                @((MarkupString)FormatSpecifications(Computer.Specifications))
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-2">
                            <strong>Purchased on:</strong> @Computer.PurchaseDate.ToShortDateString()
                        </div>
                        <div class="mb-2">
                            <strong>Warranty until:</strong>
                            <span class="@GetWarrantyClass()">
                                @Computer.WarrantyExpirationDate.ToShortDateString()
                            </span>
                        </div>
                        <div class="mb-2">
                            <strong>Assigned on:</strong>
                            @if (Computer.CurrentAssignment != null)
                            {
                                @Computer.CurrentAssignment.AssignStartDate.ToShortDateString()
                            }
                        </div>
                        <div>
                            <strong>Assigned to:</strong>
                            @if (Computer.CurrentAssignment != null)
                            {
                                @Computer.CurrentAssignment.UserFullName
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="col-1">
                <div class="btn-group-vertical">
                    <button @onclick="OnAssignClick" class="btn btn-primary mb-2" title="Assign User">
                        <i class="bi bi-person-plus"></i>
                    </button>
                    <button @onclick="OnEditClick" class="btn btn-warning mb-2" title="Edit">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button @onclick="OnDeleteClick" class="btn btn-danger" title="Delete">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Gets or sets the computer data to be displayed in the card.
    /// </summary>
    [Parameter]
    public ComputerDTO Computer { get; set; }

    /// <summary>
    /// Callback event triggered when the assign button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<ComputerDTO> OnAssign { get; set; }

    /// <summary>
    /// Callback event triggered when the edit button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<ComputerDTO> OnEdit { get; set; }

    /// <summary>
    /// Callback event triggered when the delete button is clicked.
    /// </summary>
    [Parameter]
    public EventCallback<ComputerDTO> OnDelete { get; set; }

    /// <summary>
    /// Determines the appropriate CSS class for the warranty status display based on expiration date.
    /// </summary>
    /// <returns>
    /// Returns "text-danger" if warranty has expired,
    /// "text-warning" if warranty expires within 30 days,
    /// "text-success" otherwise.
    /// </returns>
    private string GetWarrantyClass()
    {
        var daysUntilExpiration = (Computer.WarrantyExpirationDate - DateTime.Now).TotalDays;

        if (daysUntilExpiration < 0)
            return "text-danger";
        if (daysUntilExpiration <= 30)
            return "text-warning";
        return "text-success";
    }

    /// <summary>
    /// Handles the click event of the assign button.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnAssignClick()
    {
        await OnAssign.InvokeAsync(Computer);
    }

    /// <summary>
    /// Handles the click event of the edit button.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnEditClick()
    {
        await OnEdit.InvokeAsync(Computer);
    }

    /// <summary>
    /// Handles the click event of the delete button.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnDeleteClick()
    {
        await OnDelete.InvokeAsync(Computer);
    }

    /// <summary>
    /// Formats the computer specifications string by replacing HTML break tags with styled div elements.
    /// </summary>
    /// <param name="specs">The raw specifications string containing HTML break tags.</param>
    /// <returns>A formatted HTML string with styled div elements for spacing.</returns>
    private string FormatSpecifications(string specs)
    {
        if (string.IsNullOrEmpty(specs))
            return "";

        return specs.Replace("<br>", "<div class='py-1'>");
    }
}