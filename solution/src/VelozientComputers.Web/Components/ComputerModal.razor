@using VelozientComputers.Shared.DTOs
@using VelozientComputers.Core.Enums
@using VelozientComputers.Core.Extensions
@using Microsoft.AspNetCore.Components.Forms

<div class="modal @(IsVisible ? "d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(Computer?.Id > 0 ? "Edit" : "Add") Computer</h5>
                <button type="button" class="btn-close" @onclick="OnClose"></button>
            </div>
            <EditForm Model="@computerModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Manufacturer</label>
                            <InputSelect class="form-select" @bind-Value="computerModel.Manufacturer">
                                <option value="">Select manufacturer...</option>
                                <option value="Apple">Apple</option>
                                <option value="Dell">Dell</option>
                                <option value="HP">HP</option>
                                <option value="Lenovo">Lenovo</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => computerModel.Manufacturer)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Serial Number</label>
                            <InputText class="form-control" @bind-Value="computerModel.SerialNumber" />
                            <ValidationMessage For="@(() => computerModel.SerialNumber)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Status</label>
                            <InputSelect class="form-select" @bind-Value="computerModel.Status">
                                <option value="">Select status...</option>
                                @foreach (ComputerStatusEnum status in Enum.GetValues(typeof(ComputerStatusEnum)))
                                {
                                    <option value="@status">@status.ToDisplayName()</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => computerModel.Status)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Image URL</label>
                            <InputText class="form-control" @bind-Value="computerModel.ImageUrl" />
                            <ValidationMessage For="@(() => computerModel.ImageUrl)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Purchase Date</label>
                            <InputDate class="form-control" @bind-Value="computerModel.PurchaseDate" />
                            <ValidationMessage For="@(() => computerModel.PurchaseDate)" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Warranty Expiry Date</label>
                            <InputDate class="form-control" @bind-Value="computerModel.WarrantyExpiryDate" />
                            <ValidationMessage For="@(() => computerModel.WarrantyExpiryDate)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Specifications</label>
                        <InputTextArea class="form-control" @bind-Value="computerModel.Specifications" rows="3" />
                        <ValidationMessage For="@(() => computerModel.Specifications)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="OnClose">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    /// <summary>
    /// Gets or sets whether the modal is visible.
    /// </summary>
    [Parameter]
    public bool IsVisible { get; set; }

    /// <summary>
    /// Gets or sets the computer being edited, null for create mode.
    /// </summary>
    [Parameter]
    public ComputerDTO Computer { get; set; }

    /// <summary>
    /// Callback for when the modal visibility changes.
    /// </summary>
    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    /// <summary>
    /// Callback for when a computer is saved.
    /// </summary>
    [Parameter]
    public EventCallback<ComputerDTO> OnSave { get; set; }

    /// <summary>
    /// The model used for the form, using the existing CreateComputerDTO.
    /// </summary>
    private CreateComputerDTO computerModel = new();

    /// <summary>
    /// Initializes or resets the form model when parameters change.
    /// </summary>
    protected override void OnParametersSet()
    {
        if (Computer != null)
        {
            computerModel = new CreateComputerDTO
                {
                    Manufacturer = Computer.Manufacturer,
                    SerialNumber = Computer.SerialNumber,
                    Status = Computer.Status.ToString(),
                    PurchaseDate = Computer.PurchaseDate,
                    WarrantyExpiryDate = Computer.WarrantyExpirationDate,
                    Specifications = Computer.Specifications,
                    ImageUrl = Computer.ImageUrl
                };
        }
        else
        {
            computerModel = new CreateComputerDTO
                {
                    PurchaseDate = DateTime.Today,
                    WarrantyExpiryDate = DateTime.Today.AddYears(1),
                    Status = ComputerStatusEnum.New.ToString()
                };
        }
    }

    /// <summary>
    /// Handles the form submission after validation.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task HandleValidSubmit()
    {
        var computerDTO = new ComputerDTO
            {
                Id = Computer?.Id ?? 0,
                Manufacturer = computerModel.Manufacturer,
                SerialNumber = computerModel.SerialNumber,
                Status = Enum.Parse<ComputerStatusEnum>(computerModel.Status),
                PurchaseDate = computerModel.PurchaseDate,
                WarrantyExpirationDate = computerModel.WarrantyExpiryDate,
                Specifications = computerModel.Specifications,
                ImageUrl = computerModel.ImageUrl
            };

        await OnSave.InvokeAsync(computerDTO);
        await CloseModal();
    }

    /// <summary>
    /// Closes the modal and notifies the parent component.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    /// <summary>
    /// Handles the close button click event.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task OnClose()
    {
        await CloseModal();
    }
}