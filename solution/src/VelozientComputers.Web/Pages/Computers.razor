@page "/"
@using VelozientComputers.Shared.DTOs
@using VelozientComputers.Web.Services.Interfaces
@using VelozientComputers.Core.Enums
@using VelozientComputers.Core.Extensions
@inject IComputerService ComputerService
@inject IUserService UserService
@inject IAssignmentService AssignmentService
@inject IJSRuntime JSRuntime

<div class="page-container">
    <nav class="navbar bg-white border-bottom px-4">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h4">Velozient Computers</span>
            <button class="btn btn-success" @onclick="() => ShowComputerModal(null)">
                <i class="bi bi-plus-circle me-2"></i>Add computer
            </button>
        </div>
    </nav>

    <div class="content-container px-4">
        @if (loading)
        {
            <div class="text-center mt-4">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (computers == null || !computers.Any())
        {
            <div class="alert alert-info mt-4">
                No computers found. Click the "Add computer" button to get started.
            </div>
        }
        else
        {
            <div class="computers-list">
                @foreach (var computer in computers)
                {
                    <ComputerCard Computer="computer"
                                  OnAssign="ShowAssignmentModal"
                                  OnEdit="ShowComputerModal"
                                  OnDelete="DeleteComputer" />
                }
            </div>
        }
    </div>
</div>

<ComputerModal @ref="computerModal"
               IsVisible="showComputerModal"
               Computer="selectedComputer"
               IsVisibleChanged="HandleComputerModalVisibilityChanged"
               OnSave="SaveComputer" />

<AssignmentModal @ref="assignmentModal"
                 IsVisible="showAssignmentModal"
                 Computer="selectedComputer"
                 Users="users"
                 IsVisibleChanged="HandleAssignmentModalVisibilityChanged"
                 OnAssign="AssignComputer"
                 OnUnassign="UnassignComputer" />

@code {
    /// <summary>
    /// Collection of all computers in the system
    /// </summary>
    private List<ComputerDTO> computers;

    /// <summary>
    /// Collection of all users in the system
    /// </summary>
    private List<UserDTO> users;

    /// <summary>
    /// Indicates whether data is being loaded
    /// </summary>
    private bool loading = true;

    /// <summary>
    /// The currently selected computer for editing or assignment
    /// </summary>
    private ComputerDTO selectedComputer;

    /// <summary>
    /// Controls the visibility of the computer modal
    /// </summary>
    private bool showComputerModal;

    /// <summary>
    /// Controls the visibility of the assignment modal
    /// </summary>
    private bool showAssignmentModal;

    /// <summary>
    /// Reference to the computer modal component
    /// </summary>
    private ComputerModal computerModal;

    /// <summary>
    /// Reference to the assignment modal component
    /// </summary>
    private AssignmentModal assignmentModal;

    /// <summary>
    /// Initializes the component and loads initial data
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    /// <summary>
    /// Loads computers and users data from the API
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task LoadData()
    {
        try
        {
            loading = true;
            computers = (await ComputerService.GetAllAsync()).ToList();
            users = (await UserService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/notification
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    /// <summary>
    /// Shows the computer modal for creating or editing a computer
    /// </summary>
    /// <param name="computer">The computer to edit, or null for creating a new one</param>
    private void ShowComputerModal(ComputerDTO computer)
    {
        selectedComputer = computer;
        showComputerModal = true;
    }

    /// <summary>
    /// Shows the assignment modal for the selected computer
    /// </summary>
    /// <param name="computer">The computer to manage assignments for</param>
    private void ShowAssignmentModal(ComputerDTO computer)
    {
        selectedComputer = computer;
        showAssignmentModal = true;
    }

    /// <summary>
    /// Handles the computer modal visibility changes
    /// </summary>
    /// <param name="visible">The new visibility state</param>
    private void HandleComputerModalVisibilityChanged(bool visible)
    {
        showComputerModal = visible;
    }

    /// <summary>
    /// Handles the assignment modal visibility changes
    /// </summary>
    /// <param name="visible">The new visibility state</param>
    private void HandleAssignmentModalVisibilityChanged(bool visible)
    {
        showAssignmentModal = visible;
    }

    /// <summary>
    /// Saves a new or updated computer
    /// </summary>
    /// <param name="computer">The computer to save</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task SaveComputer(ComputerDTO computer)
    {
        try
        {
            loading = true;
            if (computer.Id == 0)
            {
                var createDto = new CreateComputerDTO
                    {
                        Manufacturer = computer.Manufacturer,
                        SerialNumber = computer.SerialNumber,
                        Status = computer.Status.ToString(),
                        PurchaseDate = computer.PurchaseDate,
                        WarrantyExpiryDate = computer.WarrantyExpirationDate,
                        Specifications = computer.Specifications,
                        ImageUrl = computer.ImageUrl
                    };
                await ComputerService.CreateAsync(createDto);
            }
            else
            {
                var updateDto = new UpdateComputerDTO
                    {
                        Status = computer.Status.ToString(),
                        WarrantyExpiryDate = computer.WarrantyExpirationDate,
                        Specifications = computer.Specifications,
                        ImageUrl = computer.ImageUrl
                    };
                await ComputerService.UpdateAsync(computer.Id, updateDto);
            }
            await LoadData();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/notification
            Console.WriteLine($"Error saving computer: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    /// <summary>
    /// Deletes a computer after confirmation
    /// </summary>
    /// <param name="computer">The computer to delete</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task DeleteComputer(ComputerDTO computer)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this computer?"))
        {
            try
            {
                loading = true;
                await ComputerService.DeleteAsync(computer.Id);
                await LoadData();
            }
            catch (Exception ex)
            {
                // TODO: Add proper error handling/notification
                Console.WriteLine($"Error deleting computer: {ex.Message}");
            }
            finally
            {
                loading = false;
            }
        }
    }

    /// <summary>
    /// Assigns a computer to a user
    /// </summary>
    /// <param name="userId">The ID of the user to assign the computer to</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task AssignComputer(int userId)
    {
        try
        {
            loading = true;
            await AssignmentService.AssignComputerToUserAsync(selectedComputer.Id, userId);
            await LoadData();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/notification
            Console.WriteLine($"Error assigning computer: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    /// <summary>
    /// Unassigns the selected computer from its current user
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task UnassignComputer()
    {
        try
        {
            loading = true;
            await AssignmentService.EndAssignmentAsync(selectedComputer.Id);
            await LoadData();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling/notification
            Console.WriteLine($"Error unassigning computer: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
}